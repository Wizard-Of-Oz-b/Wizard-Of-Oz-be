services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: shopapi
      POSTGRES_USER: shop
      POSTGRES_PASSWORD: secret
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shop -d shopapi"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: .env.dev
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    ports:
      - "8000:8000"
      - "8443:8443"  # 개발용 HTTPS 포트
    volumes:
      - .:/app
      - /app/.venv
      - ./ssl:/etc/nginx/ssl:ro  # 개발용 SSL 인증서 (선택사항)
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:8000/api/schema/ >/dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: .env.dev
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    command: >
      bash -lc "uv run celery -A config worker -l info --concurrency=1"
    volumes:
      - .:/app
      - /app/.venv
    restart: unless-stopped

  beat:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: .env.dev
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    command: >
      bash -lc "uv run celery -A config beat -l info -s /data/celerybeat-schedule"
    volumes:
      - .:/app
      - /app/.venv
      - beat-data:/data
    restart: unless-stopped

volumes:
  dbdata:
  beat-data:

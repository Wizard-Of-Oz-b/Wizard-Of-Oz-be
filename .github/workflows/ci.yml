name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shopapi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run code formatting check (Black)
      run: |
        uv run black --check --diff .
    
    - name: Run import sorting check (isort)
      run: |
        uv run isort --check-only --diff .
    
    - name: Run linting (flake8)
      run: |
        uv run flake8 .
    
    - name: Run security check (bandit)
      run: |
        uv run bandit -r . -x tests/
    
    - name: Run type checking (mypy)
      run: |
        uv run mypy domains/ --show-error-codes
    
    - name: Run tests with coverage
      env:
        # Database settings
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: shopapi_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        
        # Redis settings
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 0
        
        # Django settings
        DJANGO_SECRET_KEY: test-secret-key-for-ci-very-long-and-secure
        DEBUG: false
        ALLOWED_HOSTS: localhost,127.0.0.1
        
        # Test environment
        DJANGO_SETTINGS_MODULE: config.settings
      run: |
        uv run pytest --cov=domains --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build development image
      run: |
        docker build -f Dockerfile.dev -t shopapi:dev .
    
    - name: Build production image
      run: |
        docker build -f Dockerfile.prod -t shopapi:prod .
    
    - name: Test Docker containers
      run: |
        # Test that containers can start
        docker run --rm shopapi:dev python --version
        docker run --rm shopapi:prod python --version

version: "3.9"

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: shopapi
      POSTGRES_USER: shop
      POSTGRES_PASSWORD: secret
    volumes:
      - dbdata:/var/lib/postgresql/data
    # 운영에선 외부 포트 노출 안 함 (웹/워커/비트만 접근)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shop -d shopapi"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    # RDS 사용 시, 이 서비스 제거 + DATABASE_URL 만 주입

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    # ElastiCache 사용 시, 이 서비스 제거 + REDIS_URL만 주입

  web:
    # 레지스트리 이미지 사용 시:
    # image: ghcr.io/OWNER/REPO:latest
    build:
      context: .
    env_file: /srv/app/.env          # EC2에 배치된 운영용 .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: >
      bash -lc "
        python manage.py migrate --noinput &&
        gunicorn config.wsgi:application
          --bind 0.0.0.0:8000
          --workers ${GUNICORN_WORKERS:-1}
          --threads ${GUNICORN_THREADS:-1}
          --worker-class uvicorn.workers.UvicornWorker
          --max-requests 200
          --max-requests-jitter 50
          --timeout 60
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/api/schema/ >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  worker:
    build:
      context: .
    env_file: /srv/app/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -lc "celery -A config worker -l info --concurrency=${CELERY_CONCURRENCY:-2}"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  beat:
    build:
      context: .
    env_file: /srv/app/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - beat-data:/data
    command: >
      bash -lc "celery -A config beat -l info -s /data/celerybeat-schedule"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 32M

volumes:
  dbdata:
  beat-data:

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: shopapi
      POSTGRES_USER: shop
      POSTGRES_PASSWORD: secret
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shop -d shopapi"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  redis:
    image: redis:7
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    env_file: .env.prod
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:8000/api/schema/ >/dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 20

    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    env_file: .env.prod
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    entrypoint: [ ]   # 이미지의 CMD만 있고 ENTRYPOINT는 없지만, 혹시 모를 잔재를 안전하게 제거
    command: [ "uv", "run", "celery", "-A", "config", "worker", "-l", "info", "--concurrency=1" ]
    restart: unless-stopped

  beat:
    user: "1000:1000"
    build:
      context: .
      dockerfile: Dockerfile.prod
    env_file: .env.prod
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    volumes:
      - beat-data:/app/beat-data
    entrypoint: [ ]
    command: [ "uv", "run", "celery", "-A", "config", "beat", "-l", "info",
                 "-s", "/app/beat-data/celerybeat-schedule" ]
    restart: unless-stopped

volumes:
  dbdata:
  beat-data:
